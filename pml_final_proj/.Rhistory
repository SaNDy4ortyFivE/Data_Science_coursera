1+2
installed.packages()
version
install.packages("devtools")
library(KernSmooth, lib.loc = "/usr/lib/R/library")
sessioninfo()
session.Info()
sessionInfo()
library(devtools)
clear()
cls()
library(datasets)
installed.packages()
install.packages(datasets)
packageDescription(utils)
packageDescription("utils")
getwd()
install.packages("xlsx")
install.packages("rJava", dependencies = TRUE)
install.packages("xlsx")
load("~/some1/tools/Rstudio/my_projects/week4/.RData")
req_col_names <- grep("mean|std",names(dataset))
req_col_names
req_col_names <- names(dataset[,req_col_names])
nrow(req_col_names)
head(req_col_names)
req_col_names <- as.vector(req_col_names)
req_col_names <- as.vector(req_col_names[])
class(req_col_names)
summary(req_col_names)
req_col_names
req_dataset <- dataset[,req_col_names]
names(req_dataset)
head(req_dataset)
req_dataset <- rbind(dataset[,1],req_dataset,dataset[,563])
req_dataset <- dataset[,req_col_names]
req_dataset <- cbind(dataset[,1],req_dataset,dataset[,563])
head(req_dataset[,563])
head(req_dataset[,81])
req_dataset <- replace.value(req_dataset,c("activity"),from=5,to="Standing")
req_dataset <- replace(req_dataset,c("activity"),from=5,to="Standing")
?replace
head(req_dataset)
names(req_dataset[1]) <- subject_no
names(req_dataset[1]) <- "subject_no"
names(req_dataset[81]) <- "activity"
head(req_dataset)
names(req_dataset[1])
names(req_dataset[1]) <- "subject_no"
names(req_dataset[1])
names(req_dataset)[1] <- "subject_no"
names(req_dataset)[81] <- "subject_no"
names(req_dataset[1])
names(req_dataset[81])
names(req_dataset)[81] <- "activity"
names(req_dataset[81])
names(req_dataset)
req_dataset[,81] <- replace(req_dataset[,81],req_dataset$activity==5,"standing")
head(req_dataset[,c(1,2,81)],5)
req_dataset[,81] <- replace(req_dataset[,81],req_dataset$activity==6,"laying")
req_dataset[,81] <- replace(req_dataset[,81],req_dataset$activity==4,"sitting")
req_dataset[,81] <- replace(req_dataset[,81],req_dataset$activity==3,"walking downstairs")
req_dataset[,81] <- replace(req_dataset[,81],req_dataset$activity==2,"walking upstairs")
req_dataset[,81] <- replace(req_dataset[,81],req_dataset$activity==1,"walking")
summary(req_dataset[,81])
summary(req_dataset)
names(req_dataset)
head(req_dataset[,c(1,2,3,81)],50)
head(req_dataset[,c(1,2,3,81)],100)
names(req_dataset)
library(dplyr)
dt1 <- filter(req_dataset, subject_no == 1)
dt1 <- filter(dt1,activity == "standing")
colMeans(dt1[,2:80])
dt1_1 <- colMeans(dt1[,2:80])
dt1_1[1]
dt1_1[2]
dt1_1[,1]
class(dt1_1)
dt1_1 <- as.data.frame(dt1_1)
dt1_1
dt1_1 <- as.data.frame(t(dt1_1))
dt1_1[1,1]
dt1_1[1:5,1]
dt1_1[1,1:5]
dt1 <- filter(dt1,activity == "walking")
dt1 <- filter(dt1,activity == "walking upstairs")
dt1 <- filter(req_dataset, subject_no == 1)
dt1 <- filter(dt1,activity == "walking")
dt1_2 <- colmeans(dt1[,2:80])
dt1_2 <- colMeans(dt1[,2:80])
dt1_2 <- as.data.frame(t(dt1_2))
dt1_1 <- rbind(dt1_1,dt1_2)
dt1_1[1,1:5]
dt1_1[,1:5]
dt1_2
dt1_2[1]
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(xyplot(weight ~ Time | Diet, BodyWeight))
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
View(p)
p
load("~/some1/tools/Rstudio/my_projects/pml_final_proj/.RData")
model_rf
ts_pred <- predict(model_rf,ts)
confusionMatrix(ts_pred, as.factor(tr$classe))
library(caret)
confusionMatrix(ts_pred, as.factor(tr$classe))
length(ts_pred)
confusionMatrix(ts_pred, as.factor(ts$classe))
library(ggplot2)
ggplot(ts,aes(x=classe,y=ts_pred)) + geom_point()
ggplot(ts,aes(x=classe,y=ts_pred, color=classe)) + geom_point()
ggplot(ts,aes(x=classe,color=classe)) + geom_point()
cm <- confusionMatrix(ts_pred, as.factor(ts$classe))
autoplot(cm)
autoplot(cm, type="heatmap")
cm <- conf_mat(ts_pred, as.factor(ts$classe))
install.packages("Yardstick")
install.packages("yardstick")
cm <- confusionMatrix(ts_pred, as.factor(ts$classe))
cm
cm$table
cm$byClass
plot(cm$table,col=cm$byClass)
library(doParallel)
cores
registerDoParallel(cores)
model_svm <- svm(classe ~.,data = tr, type="C")
library(e1071)
model_svm <- svm(classe ~.,data = tr, type="C")
model_svm
svm_pred<-predict(model_svm,ts)
svm_pred
confusionMatrix(ts$classe,svm_pred)
stopImplicitCluster()
setwd("~/some1/tools/Rstudio/my_projects/pml_final_proj")
install.packages("Metrics")
knitr::opts_chunk$set(echo = TRUE)
set.seed(46)
library(e1071)
model_svm <- svm(classe ~.,data = train1, type="C")
library(caret)
packageVersion("caret")
library(e1071)
packageVersion("e1071")
library(dplyr)
packageVersion("dplyr")
library(Metrics)
packageVersion("Metrics")
## For taking advantage of multicore CPU
library(doParallel)
packageVersion("doParallel")
## Only physical cores
cores = detectCores(logical = FALSE)
cr <- makePSOCKcluster(as.integer(cores/2))
registerDoParallel(cr)
training <- read.csv("pml-training.csv")
dim(training)
testing <- read.csv("pml-testing.csv")
dim(testing)
col_names <- names(training)
na_cols <- ""           ##columns which are empty
for(n in col_names){
if(sum(is.na(training[,n]))>10){
na_cols<-append(na_cols,n)
}
}
head(na_cols)
## removing 1st element since it was dummy
na_cols <- na_cols[2:length(na_cols)]
head(na_cols)
training <- select(training,!all_of(na_cols))
dim(training)
names(training)
head(training[1:10,1:10])
training <- training[,8:93]
dim(training)
nzv <- nearZeroVar(training)
training <- training[,-nzv]
dim(training)
col_names <- names(training)
##removing the classe because its the output in test set which is to be predicted
col_names <- col_names[1:length(col_names)-1]
testing <- select(testing,all_of(col_names))
dim(testing)
set.seed(45)
intrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
train1 <- training[intrain,]
train2 <- training[-intrain,]
set.seed(46)
library(e1071)
model_svm <- svm(classe ~.,data = train1, type="C")
library(e1071)          ##predict function from this package
pred_svm <- predict(model_svm, train2)
confusionMatrix(train2$classe, pred_svm)
fitControl <- trainControl(
method = "oob", ##for 'oob(out of bag) score for random forest'
number = 3,)
set.seed(47)
model_rf <- train(as.factor(classe) ~ ., data = train1,
method = "ranger",
trControl = fitControl,
verbose = TRUE)
model_rf
library(caret)          ##predict function from this package
pred_rf <- predict(model_rf,train2)
confusionMatrix(train2$classe, pred_rf)
library(caret)
fin_pred <- predict(model_rf, testing)
fin_pred
library(e1071)
fin1<-predict(model_svm,testing)
fin1
knitr::opts_chunk$set(echo = TRUE)
library(caret)
packageVersion("caret")
library(e1071)
packageVersion("e1071")
library(dplyr)
packageVersion("dplyr")
library(Metrics)
packageVersion("Metrics")
## For taking advantage of multicore CPU
library(doParallel)
packageVersion("doParallel")
## Only physical cores
cores = detectCores(logical = FALSE)
cr <- makePSOCKcluster(as.integer(cores/2))
registerDoParallel(cr)
training <- read.csv("pml-training.csv")
dim(training)
testing <- read.csv("pml-testing.csv")
dim(testing)
col_names <- names(training)
na_cols <- ""           ##columns which are empty
for(n in col_names){
if(sum(is.na(training[,n]))>10){
na_cols<-append(na_cols,n)
}
}
head(na_cols)
## removing 1st element since it was dummy
na_cols <- na_cols[2:length(na_cols)]
head(na_cols)
training <- select(training,!all_of(na_cols))
dim(training)
names(training)
head(training[1:10,1:10])
training <- training[,8:93]
dim(training)
nzv <- nearZeroVar(training)
training <- training[,-nzv]
dim(training)
col_names <- names(training)
##removing the classe because its the output in test set which is to be predicted
col_names <- col_names[1:length(col_names)-1]
testing <- select(testing,all_of(col_names))
dim(testing)
set.seed(45)
intrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
train1 <- training[intrain,]
train2 <- training[-intrain,]
set.seed(46)
library(e1071)
model_svm <- svm(classe ~.,data = train1, type="C")
library(e1071)          ##predict function from this package
pred_svm <- predict(model_svm, train2)
conf_svm<-confusionMatrix(train2$classe, pred_svm)
fitControl <- trainControl(
method = "oob", ##for 'oob(out of bag) score for random forest'
number = 3,)
set.seed(47)
model_rf <- train(as.factor(classe) ~ ., data = train1,
method = "ranger",
trControl = fitControl,
verbose = TRUE)
model_rf
library(caret)          ##predict function from this package
pred_rf <- predict(model_rf,train2)
conf_rf<-confusionMatrix(train2$classe, pred_rf)
library(caret)
fin_pred <- predict(model_rf, testing)
fin_pred
library(e1071)
fin1<-predict(model_svm,testing)
fin1
